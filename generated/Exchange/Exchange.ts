// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Cancel extends ethereum.Event {
  get params(): Cancel__Params {
    return new Cancel__Params(this);
  }
}

export class Cancel__Params {
  _event: Cancel;

  constructor(event: Cancel) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenGet(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amountGet(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get tokenGive(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get amountGive(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get feeEthAmount(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get balance(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Order extends ethereum.Event {
  get params(): Order__Params {
    return new Order__Params(this);
  }
}

export class Order__Params {
  _event: Order;

  constructor(event: Order) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenGet(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amountGet(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get tokenGive(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get amountGive(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get feeEthAmount(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Subtrade extends ethereum.Event {
  get params(): Subtrade__Params {
    return new Subtrade__Params(this);
  }
}

export class Subtrade__Params {
  _event: Subtrade;

  constructor(event: Subtrade) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenGet(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amountGet(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get tokenGive(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get amountGive(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get userFill(): Address {
    return this._event.parameters[6].value.toAddress();
  }

  get timestamp(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class Trade extends ethereum.Event {
  get params(): Trade__Params {
    return new Trade__Params(this);
  }
}

export class Trade__Params {
  _event: Trade;

  constructor(event: Trade) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenGet(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amountGet(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get tokenGive(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get amountGive(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get userFill(): Address {
    return this._event.parameters[6].value.toAddress();
  }

  get timestamp(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class UpdateFeeInfo extends ethereum.Event {
  get params(): UpdateFeeInfo__Params {
    return new UpdateFeeInfo__Params(this);
  }
}

export class UpdateFeeInfo__Params {
  _event: UpdateFeeInfo;

  constructor(event: UpdateFeeInfo) {
    this._event = event;
  }

  get feeAccount(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get feeNum(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get feeNativeNum(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get feeDen(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get nativeTokenMin(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get balance(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Exchange__getOpenOrdersResultValue0Struct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get user(): Address {
    return this[1].toAddress();
  }

  get tokenGet(): Address {
    return this[2].toAddress();
  }

  get amountGet(): BigInt {
    return this[3].toBigInt();
  }

  get tokenGive(): Address {
    return this[4].toAddress();
  }

  get amountGive(): BigInt {
    return this[5].toBigInt();
  }

  get feeEthAmount(): BigInt {
    return this[6].toBigInt();
  }

  get timestamp(): BigInt {
    return this[7].toBigInt();
  }
}

export class Exchange__ordersResult {
  value0: BigInt;
  value1: Address;
  value2: Address;
  value3: BigInt;
  value4: Address;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: Address,
    value3: BigInt,
    value4: Address,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }

  getId(): BigInt {
    return this.value0;
  }

  getUser(): Address {
    return this.value1;
  }

  getTokenGet(): Address {
    return this.value2;
  }

  getAmountGet(): BigInt {
    return this.value3;
  }

  getTokenGive(): Address {
    return this.value4;
  }

  getAmountGive(): BigInt {
    return this.value5;
  }

  getFeeEthAmount(): BigInt {
    return this.value6;
  }

  getTimestamp(): BigInt {
    return this.value7;
  }
}

export class Exchange extends ethereum.SmartContract {
  static bind(address: Address): Exchange {
    return new Exchange("Exchange", address);
  }

  WETHER(): Address {
    let result = super.call("WETHER", "WETHER():(address)", []);

    return result[0].toAddress();
  }

  try_WETHER(): ethereum.CallResult<Address> {
    let result = super.tryCall("WETHER", "WETHER():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allowedTokenLists(param0: BigInt): Address {
    let result = super.call(
      "allowedTokenLists",
      "allowedTokenLists(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_allowedTokenLists(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "allowedTokenLists",
      "allowedTokenLists(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allowedTokens(param0: Address): boolean {
    let result = super.call("allowedTokens", "allowedTokens(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_allowedTokens(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "allowedTokens",
      "allowedTokens(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(_token: Address, _user: Address): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,address):(uint256)",
      [ethereum.Value.fromAddress(_token), ethereum.Value.fromAddress(_user)]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(_token: Address, _user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,address):(uint256)",
      [ethereum.Value.fromAddress(_token), ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  countEtherFromToken(_token: Address, _tokenAmount: BigInt): BigInt {
    let result = super.call(
      "countEtherFromToken",
      "countEtherFromToken(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_tokenAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_countEtherFromToken(
    _token: Address,
    _tokenAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "countEtherFromToken",
      "countEtherFromToken(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_tokenAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feeAccount(): Address {
    let result = super.call("feeAccount", "feeAccount():(address)", []);

    return result[0].toAddress();
  }

  try_feeAccount(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeAccount", "feeAccount():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  feeDen(): BigInt {
    let result = super.call("feeDen", "feeDen():(uint256)", []);

    return result[0].toBigInt();
  }

  try_feeDen(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("feeDen", "feeDen():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feeNativeNum(): BigInt {
    let result = super.call("feeNativeNum", "feeNativeNum():(uint256)", []);

    return result[0].toBigInt();
  }

  try_feeNativeNum(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("feeNativeNum", "feeNativeNum():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feeNum(): BigInt {
    let result = super.call("feeNum", "feeNum():(uint256)", []);

    return result[0].toBigInt();
  }

  try_feeNum(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("feeNum", "feeNum():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOpenOrders(): Array<Exchange__getOpenOrdersResultValue0Struct> {
    let result = super.call(
      "getOpenOrders",
      "getOpenOrders():((uint256,address,address,uint256,address,uint256,uint256,uint256)[])",
      []
    );

    return result[0].toTupleArray<Exchange__getOpenOrdersResultValue0Struct>();
  }

  try_getOpenOrders(): ethereum.CallResult<
    Array<Exchange__getOpenOrdersResultValue0Struct>
  > {
    let result = super.tryCall(
      "getOpenOrders",
      "getOpenOrders():((uint256,address,address,uint256,address,uint256,uint256,uint256)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Exchange__getOpenOrdersResultValue0Struct>()
    );
  }

  isListedToken(_token: Address): boolean {
    let result = super.call("isListedToken", "isListedToken(address):(bool)", [
      ethereum.Value.fromAddress(_token)
    ]);

    return result[0].toBoolean();
  }

  try_isListedToken(_token: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isListedToken",
      "isListedToken(address):(bool)",
      [ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isNativeTokenHolder(_user: Address): boolean {
    let result = super.call(
      "isNativeTokenHolder",
      "isNativeTokenHolder(address):(bool)",
      [ethereum.Value.fromAddress(_user)]
    );

    return result[0].toBoolean();
  }

  try_isNativeTokenHolder(_user: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isNativeTokenHolder",
      "isNativeTokenHolder(address):(bool)",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  nativeTokenAddress(): Address {
    let result = super.call(
      "nativeTokenAddress",
      "nativeTokenAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_nativeTokenAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "nativeTokenAddress",
      "nativeTokenAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  nativeTokenMin(): BigInt {
    let result = super.call("nativeTokenMin", "nativeTokenMin():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nativeTokenMin(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nativeTokenMin",
      "nativeTokenMin():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  orderCancelled(param0: BigInt): boolean {
    let result = super.call(
      "orderCancelled",
      "orderCancelled(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBoolean();
  }

  try_orderCancelled(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "orderCancelled",
      "orderCancelled(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  orderCount(): BigInt {
    let result = super.call("orderCount", "orderCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_orderCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("orderCount", "orderCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  orderFilled(param0: BigInt): boolean {
    let result = super.call("orderFilled", "orderFilled(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBoolean();
  }

  try_orderFilled(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("orderFilled", "orderFilled(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  orders(param0: BigInt): Exchange__ordersResult {
    let result = super.call(
      "orders",
      "orders(uint256):(uint256,address,address,uint256,address,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Exchange__ordersResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt()
    );
  }

  try_orders(param0: BigInt): ethereum.CallResult<Exchange__ordersResult> {
    let result = super.tryCall(
      "orders",
      "orders(uint256):(uint256,address,address,uint256,address,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Exchange__ordersResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt()
      )
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  swapPaths(param0: Address, param1: BigInt): Address {
    let result = super.call(
      "swapPaths",
      "swapPaths(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toAddress();
  }

  try_swapPaths(param0: Address, param1: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "swapPaths",
      "swapPaths(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenBalances(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "tokenBalances",
      "tokenBalances(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_tokenBalances(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenBalances",
      "tokenBalances(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  uniswapV2Router(): Address {
    let result = super.call(
      "uniswapV2Router",
      "uniswapV2Router():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_uniswapV2Router(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "uniswapV2Router",
      "uniswapV2Router():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _natvieToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AllowTokensCall extends ethereum.Call {
  get inputs(): AllowTokensCall__Inputs {
    return new AllowTokensCall__Inputs(this);
  }

  get outputs(): AllowTokensCall__Outputs {
    return new AllowTokensCall__Outputs(this);
  }
}

export class AllowTokensCall__Inputs {
  _call: AllowTokensCall;

  constructor(call: AllowTokensCall) {
    this._call = call;
  }

  get _tokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _value(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class AllowTokensCall__Outputs {
  _call: AllowTokensCall;

  constructor(call: AllowTokensCall) {
    this._call = call;
  }
}

export class CancelOrderCall extends ethereum.Call {
  get inputs(): CancelOrderCall__Inputs {
    return new CancelOrderCall__Inputs(this);
  }

  get outputs(): CancelOrderCall__Outputs {
    return new CancelOrderCall__Outputs(this);
  }
}

export class CancelOrderCall__Inputs {
  _call: CancelOrderCall;

  constructor(call: CancelOrderCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelOrderCall__Outputs {
  _call: CancelOrderCall;

  constructor(call: CancelOrderCall) {
    this._call = call;
  }
}

export class DepositEtherCall extends ethereum.Call {
  get inputs(): DepositEtherCall__Inputs {
    return new DepositEtherCall__Inputs(this);
  }

  get outputs(): DepositEtherCall__Outputs {
    return new DepositEtherCall__Outputs(this);
  }
}

export class DepositEtherCall__Inputs {
  _call: DepositEtherCall;

  constructor(call: DepositEtherCall) {
    this._call = call;
  }
}

export class DepositEtherCall__Outputs {
  _call: DepositEtherCall;

  constructor(call: DepositEtherCall) {
    this._call = call;
  }
}

export class DepositTokenCall extends ethereum.Call {
  get inputs(): DepositTokenCall__Inputs {
    return new DepositTokenCall__Inputs(this);
  }

  get outputs(): DepositTokenCall__Outputs {
    return new DepositTokenCall__Outputs(this);
  }
}

export class DepositTokenCall__Inputs {
  _call: DepositTokenCall;

  constructor(call: DepositTokenCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositTokenCall__Outputs {
  _call: DepositTokenCall;

  constructor(call: DepositTokenCall) {
    this._call = call;
  }
}

export class FillOrderCall extends ethereum.Call {
  get inputs(): FillOrderCall__Inputs {
    return new FillOrderCall__Inputs(this);
  }

  get outputs(): FillOrderCall__Outputs {
    return new FillOrderCall__Outputs(this);
  }
}

export class FillOrderCall__Inputs {
  _call: FillOrderCall;

  constructor(call: FillOrderCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _getAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class FillOrderCall__Outputs {
  _call: FillOrderCall;

  constructor(call: FillOrderCall) {
    this._call = call;
  }
}

export class MakeOrderCall extends ethereum.Call {
  get inputs(): MakeOrderCall__Inputs {
    return new MakeOrderCall__Inputs(this);
  }

  get outputs(): MakeOrderCall__Outputs {
    return new MakeOrderCall__Outputs(this);
  }
}

export class MakeOrderCall__Inputs {
  _call: MakeOrderCall;

  constructor(call: MakeOrderCall) {
    this._call = call;
  }

  get _tokenGet(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amountGet(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _tokenGive(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _amountGive(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class MakeOrderCall__Outputs {
  _call: MakeOrderCall;

  constructor(call: MakeOrderCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetTokenSwapPathCall extends ethereum.Call {
  get inputs(): SetTokenSwapPathCall__Inputs {
    return new SetTokenSwapPathCall__Inputs(this);
  }

  get outputs(): SetTokenSwapPathCall__Outputs {
    return new SetTokenSwapPathCall__Outputs(this);
  }
}

export class SetTokenSwapPathCall__Inputs {
  _call: SetTokenSwapPathCall;

  constructor(call: SetTokenSwapPathCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _path(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class SetTokenSwapPathCall__Outputs {
  _call: SetTokenSwapPathCall;

  constructor(call: SetTokenSwapPathCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateFeeInfoCall extends ethereum.Call {
  get inputs(): UpdateFeeInfoCall__Inputs {
    return new UpdateFeeInfoCall__Inputs(this);
  }

  get outputs(): UpdateFeeInfoCall__Outputs {
    return new UpdateFeeInfoCall__Outputs(this);
  }
}

export class UpdateFeeInfoCall__Inputs {
  _call: UpdateFeeInfoCall;

  constructor(call: UpdateFeeInfoCall) {
    this._call = call;
  }

  get _feeAccount(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _feeNum(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _feeNativeNum(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _feeDen(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _nativeTokenMin(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class UpdateFeeInfoCall__Outputs {
  _call: UpdateFeeInfoCall;

  constructor(call: UpdateFeeInfoCall) {
    this._call = call;
  }
}

export class UpdateNativeTokenCall extends ethereum.Call {
  get inputs(): UpdateNativeTokenCall__Inputs {
    return new UpdateNativeTokenCall__Inputs(this);
  }

  get outputs(): UpdateNativeTokenCall__Outputs {
    return new UpdateNativeTokenCall__Outputs(this);
  }
}

export class UpdateNativeTokenCall__Inputs {
  _call: UpdateNativeTokenCall;

  constructor(call: UpdateNativeTokenCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateNativeTokenCall__Outputs {
  _call: UpdateNativeTokenCall;

  constructor(call: UpdateNativeTokenCall) {
    this._call = call;
  }
}

export class WithdrawEtherCall extends ethereum.Call {
  get inputs(): WithdrawEtherCall__Inputs {
    return new WithdrawEtherCall__Inputs(this);
  }

  get outputs(): WithdrawEtherCall__Outputs {
    return new WithdrawEtherCall__Outputs(this);
  }
}

export class WithdrawEtherCall__Inputs {
  _call: WithdrawEtherCall;

  constructor(call: WithdrawEtherCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawEtherCall__Outputs {
  _call: WithdrawEtherCall;

  constructor(call: WithdrawEtherCall) {
    this._call = call;
  }
}

export class WithdrawTokenCall extends ethereum.Call {
  get inputs(): WithdrawTokenCall__Inputs {
    return new WithdrawTokenCall__Inputs(this);
  }

  get outputs(): WithdrawTokenCall__Outputs {
    return new WithdrawTokenCall__Outputs(this);
  }
}

export class WithdrawTokenCall__Inputs {
  _call: WithdrawTokenCall;

  constructor(call: WithdrawTokenCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawTokenCall__Outputs {
  _call: WithdrawTokenCall;

  constructor(call: WithdrawTokenCall) {
    this._call = call;
  }
}
